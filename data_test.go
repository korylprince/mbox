// Code generated by go-bindata.
// sources:
// test_data/0.mbox
// test_data/0.res
// test_data/1.mbox
// test_data/1.res
// test_data/2.mbox
// test_data/2.res
// test_data/3.mbox
// test_data/3.res
// test_data/4.mbox
// test_data/4.res
// test_data/5.mbox
// test_data/5.res
// DO NOT EDIT!

package mbox_test

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _test_data0Mbox = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x92\x5b\x6f\xd3\x30\x14\xc7\x9f\xe7\x4f\x71\x1e\x57\x89\x38\xce\xa5\x37\x33\x4a\x41\x1b\x5a\x11\x95\x26\x5a\x60\x08\xf1\xe0\xc6\xa7\x8d\x21\x89\x8b\xed\x52\xf1\xed\x71\x9a\xae\x4b\xb5\x07\xba\x21\xde\x78\xca\x43\xce\xff\x72\x8e\x7f\x6f\x8c\x2e\x41\x0a\x2c\x75\x35\x9e\xcc\x26\xf4\xea\xf2\x03\x7c\x42\x09\x53\x61\x80\xf5\x20\xea\xf1\x74\xc8\x53\x06\x31\x63\x31\x79\x8f\x19\xaa\x9f\x28\x39\x2c\x7e\xc1\x42\x1b\x14\x96\x2a\xab\x28\xca\x0d\x9c\x0f\x68\x14\xd1\x5e\xb8\xfb\xc4\x1d\x50\x12\x56\x71\x9f\x55\xd2\x45\x49\xc2\xba\xe4\x6c\xa9\x0d\x38\xbd\xc9\xf2\xa0\x2c\x83\x52\xa8\xa2\x14\xd5\xf3\x3a\xeb\x19\xf4\x76\x71\x75\xc4\x3e\x30\x19\x42\xc0\x06\x8c\xc1\xf9\xcd\x6c\xde\x69\xe5\x9e\x2f\xeb\xbe\x3b\x9b\x71\xa1\x33\x51\xe4\xda\xba\x0e\x39\x7b\x44\x9f\x22\x4a\xe2\x61\xff\xb8\xcf\x89\x3d\x2e\x85\x43\x7e\xda\x68\x7d\x57\x0e\x6f\x35\xc2\xbc\xce\x80\x8b\xa6\xf3\xfe\xc4\x23\x32\x45\x6b\xc5\x0a\x83\x89\x5f\xea\xa2\xb6\x61\x09\xeb\x33\x96\x0e\x69\xbb\xe5\xf8\x78\xa9\x11\x99\x6b\x7e\x28\x7d\x67\x46\x66\x9b\xc5\x37\xcc\x1c\x87\x2f\xf3\xfd\xaf\xaf\xe0\xd0\x3a\x55\xad\xc8\x0c\x2b\x89\xe6\x5e\x14\x08\x59\xaa\x6a\xbc\xf6\x67\xc3\x82\x6a\xb3\x22\x57\xc6\x68\x63\x83\xb6\xf3\xc3\xa1\xdb\xe0\x35\x62\x35\xcf\xd1\x60\xab\xc0\xd1\xc0\xb4\x79\xd2\xe0\x23\x1a\xab\x74\xc5\x21\xa6\x8c\x46\xe4\xc6\xf8\xc7\x93\x58\x65\x5e\xb8\xd8\x14\xdf\xc9\x3b\x65\x5d\x70\x8d\xc5\xda\x2f\x5e\x63\xe0\x34\x3f\xe4\x1a\xfc\xb1\xf1\xc5\x5b\xc6\x2f\x6d\xb3\xdc\x8b\xdc\x2b\x46\x8d\xf8\x95\xc9\x72\x8f\x83\xd7\xe7\xce\xad\x79\x18\x6e\xb7\x5b\x7a\x2f\x09\xd7\x6a\x8d\xa6\xb6\x0e\xef\x8c\xc3\x11\x21\x56\xc8\x25\x21\x7f\xe6\xbd\x9b\xf2\x24\x7d\x32\xef\xf6\xf3\x75\x34\x48\x93\xc7\xf0\xde\x04\xfe\x23\xde\xed\x6d\xea\xfb\xb0\xde\x09\xbc\xd7\x3d\x92\xd3\x78\x7f\x38\xfa\x44\xde\xbb\x29\x6d\xb7\xfc\x6b\xde\xa1\xd0\xab\xa5\x2a\xf0\x3f\xf7\x07\xee\xc9\xef\x00\x00\x00\xff\xff\x70\x40\x84\x1a\xe3\x05\x00\x00")

func test_data0MboxBytes() ([]byte, error) {
	return bindataRead(
		_test_data0Mbox,
		"test_data/0.mbox",
	)
}

func test_data0Mbox() (*asset, error) {
	bytes, err := test_data0MboxBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_data/0.mbox", size: 1507, mode: os.FileMode(416), modTime: time.Unix(1453406751, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_data0Res = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x5f\x6f\xd3\x30\x14\xc5\x9f\xe7\x4f\x71\x1f\x57\x09\x3b\x4e\x52\xda\xd5\x8c\x52\xd0\x86\x28\xa2\xd2\x44\xc3\x1f\x09\xf1\xe0\xc6\xb7\x8d\x21\xb1\x83\xed\x50\xf1\xed\x71\xda\x6e\x4b\xc5\xcb\x78\xca\x43\xee\x39\xe7\x77\xae\xef\x5b\x67\x1b\x50\x12\x1b\x6b\x16\xcb\xf5\x92\xdd\xde\x7c\x82\x2f\xa8\x60\x25\x1d\xf0\x09\xa4\x13\x31\x9e\x89\x31\x87\x8c\xf3\x8c\x7c\xc4\x12\xf5\x6f\x54\x02\x36\x7f\x60\x63\x1d\x4a\xcf\xb4\xd7\x0c\x55\x07\x97\x57\x2c\x4d\xd9\x24\x39\x7c\xb2\x11\x68\x05\xbb\x6c\xca\x8d\x0a\x69\x9e\xf3\xe7\xe4\x62\x6b\x1d\x04\xdb\x95\x15\x6d\x1a\xda\x48\x5d\x37\xd2\xbc\xe8\xb3\x9e\xc1\xe4\x10\xd7\x47\x9c\x02\xf3\x19\x50\x7e\xc5\x39\x5c\xde\xad\x8b\xd1\x20\xf7\x72\xdb\xf3\x1e\x6c\x16\xb5\x2d\x65\x5d\x59\x1f\x46\xe4\xe2\x3f\x78\xea\x34\xcf\x66\xd3\x73\x9e\x27\x72\xdc\xc8\x80\xe2\x69\xa3\xfd\x5e\x05\xbc\xb7\x08\x45\x9f\x01\xd7\x47\xe6\xd3\x8a\xe7\x64\x85\xde\xcb\x1d\xd2\x65\x2c\x75\xdd\xdb\xf0\x9c\x4f\x39\x1f\xcf\xd8\x90\x72\x71\x5e\x6a\x4e\x0a\x2b\x1e\xa0\xef\xcd\xc8\xba\xdb\xfc\xc0\x32\x08\xf8\x56\x9c\x7e\x7d\x87\x80\x3e\x68\xb3\x23\x6b\x34\x0a\xdd\xa3\x88\x4a\xd5\x68\xb3\x68\xe3\xda\xb0\x66\xd6\xed\xc8\xad\x73\xd6\x79\x3a\x74\xfe\x77\xe8\x2b\x7d\x83\x68\x8a\x0a\x1d\x0e\x00\xce\x06\x56\xc7\x27\xa5\x9f\xd1\x79\x6d\x8d\x80\x8c\x71\x96\x92\x3b\x17\x1f\x4f\xa1\x29\xa3\x70\xd3\xd5\x3f\xc9\x07\xed\x03\x7d\x87\x75\x1b\x8b\xf7\x67\x10\xac\x78\xc8\x75\xf8\xab\x8b\xe0\x03\xe3\x57\xfe\x58\xee\x65\x15\x15\xf3\xa3\xf8\xb5\x2b\xab\x78\x0e\x51\x5f\x85\xd0\x8a\x24\xd9\xef\xf7\xec\x51\x92\xb4\xba\x45\xd7\x5b\x27\xf7\xc6\xc9\x9c\x10\x2f\xd5\x96\x90\xbf\x01\x00\x00\xff\xff\x09\xef\x93\x81\xf0\x02\x00\x00")

func test_data0ResBytes() ([]byte, error) {
	return bindataRead(
		_test_data0Res,
		"test_data/0.res",
	)
}

func test_data0Res() (*asset, error) {
	bytes, err := test_data0ResBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_data/0.res", size: 752, mode: os.FileMode(416), modTime: time.Unix(1453406751, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_data1Mbox = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x2b\xca\xcf\x55\x48\x49\x4c\xcd\xcd\xcf\x73\xf0\x0c\xf6\xd4\x73\x75\x09\x55\x08\x4f\x4d\x51\xf0\x4d\x2c\x52\x30\x30\x53\xe0\x02\x04\x00\x00\xff\xff\xf8\x57\xe2\x59\x20\x00\x00\x00")

func test_data1MboxBytes() ([]byte, error) {
	return bindataRead(
		_test_data1Mbox,
		"test_data/1.mbox",
	)
}

func test_data1Mbox() (*asset, error) {
	bytes, err := test_data1MboxBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_data/1.mbox", size: 32, mode: os.FileMode(416), modTime: time.Unix(1453406751, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_data1Res = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func test_data1ResBytes() ([]byte, error) {
	return bindataRead(
		_test_data1Res,
		"test_data/1.res",
	)
}

func test_data1Res() (*asset, error) {
	bytes, err := test_data1ResBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_data/1.res", size: 0, mode: os.FileMode(420), modTime: time.Unix(1453406751, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_data2Mbox = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func test_data2MboxBytes() ([]byte, error) {
	return bindataRead(
		_test_data2Mbox,
		"test_data/2.mbox",
	)
}

func test_data2Mbox() (*asset, error) {
	bytes, err := test_data2MboxBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_data/2.mbox", size: 0, mode: os.FileMode(420), modTime: time.Unix(1453406751, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_data2Res = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func test_data2ResBytes() ([]byte, error) {
	return bindataRead(
		_test_data2Res,
		"test_data/2.res",
	)
}

func test_data2Res() (*asset, error) {
	bytes, err := test_data2ResBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_data/2.res", size: 0, mode: os.FileMode(420), modTime: time.Unix(1453406751, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_data3Mbox = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x5f\x6f\xd3\x30\x14\xc5\x9f\xe7\x4f\x71\x1f\x57\x09\x3b\x4e\x52\xda\xd5\x8c\x52\xd0\x86\x28\xa2\xd2\x44\xc3\x1f\x09\xf1\xe0\xc6\xb7\x8d\x21\xb1\x83\xed\x50\xf1\xed\x71\xda\x6e\x4b\xc5\xcb\x78\xca\x43\xee\x39\xe7\x77\xae\xef\x5b\x67\x1b\x50\x12\x1b\x6b\x16\xcb\xf5\x92\xdd\xde\x7c\x82\x2f\xa8\x60\x25\x1d\xf0\x09\xa4\x13\x31\x9e\x89\x31\x87\x8c\xf3\x8c\x7c\xc4\x12\xf5\x6f\x54\x02\x36\x7f\x60\x63\x1d\x4a\xcf\xb4\xd7\x0c\x55\x07\x97\x57\x2c\x4d\xd9\x24\x39\x7c\xb2\x11\x68\x05\xbb\x6c\xca\x8d\x0a\x69\x9e\xf3\xe7\xe4\x62\x6b\x1d\x04\xdb\x95\x15\x6d\x1a\xda\x48\x5d\x37\xd2\xbc\xe8\xb3\x9e\xc1\xe4\x10\xd7\x47\x9c\x02\xf3\x19\x50\x7e\xc5\x39\x5c\xde\xad\x8b\xd1\x20\xf7\x72\xdb\xf3\x1e\x6c\x16\xb5\x2d\x65\x5d\x59\x1f\x46\xe4\xe2\x3f\x78\xea\x34\xcf\x66\xd3\x73\x9e\x27\x72\xdc\xc8\x80\xe2\x69\xa3\xfd\x5e\x05\xbc\xb7\x08\x45\x9f\x01\xd7\x47\xe6\xd3\x8a\xe7\x64\x85\xde\xcb\x1d\xd2\x65\x2c\x75\xdd\xdb\xf0\x9c\x4f\x39\x1f\xcf\xd8\x90\x72\x71\x5e\x6a\x4e\x0a\x2b\x1e\xa0\xef\xcd\xc8\xba\xdb\xfc\xc0\x32\x08\xf8\x56\x9c\x7e\x7d\x87\x80\x3e\x68\xb3\x23\x6b\x34\x0a\xdd\xa3\x88\x4a\xd5\x68\xb3\x68\xe3\xda\xb0\x66\xd6\xed\xc8\xad\x73\xd6\x79\x3a\x74\xfe\x77\xe8\x2b\x7d\x83\x68\x8a\x0a\x1d\x0e\x00\xce\x06\x56\xc7\x27\xa5\x9f\xd1\x79\x6d\x8d\x80\x8c\x71\x96\x92\x3b\x17\x1f\x4f\xa1\x29\xa3\x70\xd3\xd5\x3f\xc9\x07\xed\x03\x7d\x87\x75\x1b\x8b\xf7\x67\x10\xac\x78\xc8\x75\xf8\xab\x8b\xe0\x03\xe3\x57\xfe\x58\xee\x65\x15\x15\xf3\xa3\xf8\xb5\x2b\xab\x78\x0e\x51\x5f\x85\xd0\x8a\x24\xd9\xef\xf7\xec\x51\x92\xb4\xba\x45\xd7\x5b\x27\xf7\xc6\xc9\x9c\x10\x2f\xd5\x96\x90\xbf\x01\x00\x00\xff\xff\x09\xef\x93\x81\xf0\x02\x00\x00")

func test_data3MboxBytes() ([]byte, error) {
	return bindataRead(
		_test_data3Mbox,
		"test_data/3.mbox",
	)
}

func test_data3Mbox() (*asset, error) {
	bytes, err := test_data3MboxBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_data/3.mbox", size: 752, mode: os.FileMode(416), modTime: time.Unix(1453406751, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_data3Res = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x5f\x6f\xd3\x30\x14\xc5\x9f\xe7\x4f\x71\x1f\x57\x09\x3b\x4e\x52\xda\xd5\x8c\x52\xd0\x86\x28\xa2\xd2\x44\xc3\x1f\x09\xf1\xe0\xc6\xb7\x8d\x21\xb1\x83\xed\x50\xf1\xed\x71\xda\x6e\x4b\xc5\xcb\x78\xca\x43\xee\x39\xe7\x77\xae\xef\x5b\x67\x1b\x50\x12\x1b\x6b\x16\xcb\xf5\x92\xdd\xde\x7c\x82\x2f\xa8\x60\x25\x1d\xf0\x09\xa4\x13\x31\x9e\x89\x31\x87\x8c\xf3\x8c\x7c\xc4\x12\xf5\x6f\x54\x02\x36\x7f\x60\x63\x1d\x4a\xcf\xb4\xd7\x0c\x55\x07\x97\x57\x2c\x4d\xd9\x24\x39\x7c\xb2\x11\x68\x05\xbb\x6c\xca\x8d\x0a\x69\x9e\xf3\xe7\xe4\x62\x6b\x1d\x04\xdb\x95\x15\x6d\x1a\xda\x48\x5d\x37\xd2\xbc\xe8\xb3\x9e\xc1\xe4\x10\xd7\x47\x9c\x02\xf3\x19\x50\x7e\xc5\x39\x5c\xde\xad\x8b\xd1\x20\xf7\x72\xdb\xf3\x1e\x6c\x16\xb5\x2d\x65\x5d\x59\x1f\x46\xe4\xe2\x3f\x78\xea\x34\xcf\x66\xd3\x73\x9e\x27\x72\xdc\xc8\x80\xe2\x69\xa3\xfd\x5e\x05\xbc\xb7\x08\x45\x9f\x01\xd7\x47\xe6\xd3\x8a\xe7\x64\x85\xde\xcb\x1d\xd2\x65\x2c\x75\xdd\xdb\xf0\x9c\x4f\x39\x1f\xcf\xd8\x90\x72\x71\x5e\x6a\x4e\x0a\x2b\x1e\xa0\xef\xcd\xc8\xba\xdb\xfc\xc0\x32\x08\xf8\x56\x9c\x7e\x7d\x87\x80\x3e\x68\xb3\x23\x6b\x34\x0a\xdd\xa3\x88\x4a\xd5\x68\xb3\x68\xe3\xda\xb0\x66\xd6\xed\xc8\xad\x73\xd6\x79\x3a\x74\xfe\x77\xe8\x2b\x7d\x83\x68\x8a\x0a\x1d\x0e\x00\xce\x06\x56\xc7\x27\xa5\x9f\xd1\x79\x6d\x8d\x80\x8c\x71\x96\x92\x3b\x17\x1f\x4f\xa1\x29\xa3\x70\xd3\xd5\x3f\xc9\x07\xed\x03\x7d\x87\x75\x1b\x8b\xf7\x67\x10\xac\x78\xc8\x75\xf8\xab\x8b\xe0\x03\xe3\x57\xfe\x58\xee\x65\x15\x15\xf3\xa3\xf8\xb5\x2b\xab\x78\x0e\x51\x5f\x85\xd0\x8a\x24\xd9\xef\xf7\xec\x51\x92\xb4\xba\x45\xd7\x5b\x27\xf7\xc6\xc9\x9c\x10\x2f\xd5\x96\x90\xbf\x01\x00\x00\xff\xff\x09\xef\x93\x81\xf0\x02\x00\x00")

func test_data3ResBytes() ([]byte, error) {
	return bindataRead(
		_test_data3Res,
		"test_data/3.res",
	)
}

func test_data3Res() (*asset, error) {
	bytes, err := test_data3ResBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_data/3.res", size: 752, mode: os.FileMode(416), modTime: time.Unix(1453406751, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_data4Mbox = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x5f\x6f\xd3\x30\x14\xc5\x9f\xe7\x4f\x71\x1f\x57\x09\x3b\x4e\x52\xda\xd5\x8c\x52\xd0\x86\x28\xa2\xd2\x44\xc3\x1f\x09\xf1\xe0\xc6\xb7\x8d\x21\xb1\x83\xed\x50\xf1\xed\x71\xda\x6e\x4b\xc5\xcb\x78\xca\x43\xee\x39\xe7\x77\xae\xef\x5b\x67\x1b\x50\x12\x1b\x6b\x16\xcb\xf5\x92\xdd\xde\x7c\x82\x2f\xa8\x60\x25\x1d\xf0\x09\xa4\x13\x31\x9e\x89\x31\x87\x8c\xf3\x8c\x7c\xc4\x12\xf5\x6f\x54\x02\x36\x7f\x60\x63\x1d\x4a\xcf\xb4\xd7\x0c\x55\x07\x97\x57\x2c\x4d\xd9\x24\x39\x7c\xb2\x11\x68\x05\xbb\x6c\xca\x8d\x0a\x69\x9e\xf3\xe7\xe4\x62\x6b\x1d\x04\xdb\x95\x15\x6d\x1a\xda\x48\x5d\x37\xd2\xbc\xe8\xb3\x9e\xc1\xe4\x10\xd7\x47\x9c\x02\xf3\x19\x50\x7e\xc5\x39\x5c\xde\xad\x8b\xd1\x20\xf7\x72\xdb\xf3\x1e\x6c\x16\xb5\x2d\x65\x5d\x59\x1f\x46\xe4\xe2\x3f\x78\xea\x34\xcf\x66\xd3\x73\x9e\x27\x72\xdc\xc8\x80\xe2\x69\xa3\xfd\x5e\x05\xbc\xb7\x08\x45\x9f\x01\xd7\x47\xe6\xd3\x8a\xe7\x64\x85\xde\xcb\x1d\xd2\x65\x2c\x75\xdd\xdb\xf0\x9c\x4f\x39\x1f\xcf\xd8\x90\x72\x71\x5e\x6a\x4e\x0a\x2b\x1e\xa0\xef\xcd\xc8\xba\xdb\xfc\xc0\x32\x08\xf8\x56\x9c\x7e\x7d\x87\x80\x3e\x68\xb3\x23\x6b\x34\x0a\xdd\xa3\x88\x4a\xd5\x68\xb3\x68\xe3\xda\xb0\x66\xd6\xed\xc8\xad\x73\xd6\x79\x3a\x74\xfe\x77\xe8\x2b\x7d\x83\x68\x8a\x0a\x1d\x0e\x00\xce\x06\x56\xc7\x27\xa5\x9f\xd1\x79\x6d\x8d\x80\x8c\x71\x96\x92\x3b\x17\x1f\x4f\xa1\x29\xa3\x70\xd3\xd5\x3f\xc9\x07\xed\x03\x7d\x87\x75\x1b\x8b\xf7\x67\x10\xac\x78\xc8\x75\xf8\xab\x8b\xe0\x03\xe3\x57\xfe\x58\xee\x65\x15\x15\xf3\xa3\xf8\xb5\x2b\xab\x78\x0e\x51\x5f\x85\xd0\x8a\x24\xd9\xef\xf7\xec\x51\x92\xb4\xba\x45\xd7\x5b\x27\xf7\xc6\xc9\x9c\x10\x2f\xd5\x96\x90\xbf\x01\x00\x00\xff\xff\x09\xef\x93\x81\xf0\x02\x00\x00")

func test_data4MboxBytes() ([]byte, error) {
	return bindataRead(
		_test_data4Mbox,
		"test_data/4.mbox",
	)
}

func test_data4Mbox() (*asset, error) {
	bytes, err := test_data4MboxBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_data/4.mbox", size: 752, mode: os.FileMode(416), modTime: time.Unix(1453406751, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_data4Res = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func test_data4ResBytes() ([]byte, error) {
	return bindataRead(
		_test_data4Res,
		"test_data/4.res",
	)
}

func test_data4Res() (*asset, error) {
	bytes, err := test_data4ResBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_data/4.res", size: 0, mode: os.FileMode(420), modTime: time.Unix(1453406751, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_data5Mbox = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x2b\xca\xcf\x55\x48\x49\x4c\xcd\xcd\xcf\x73\xf0\x0c\xf6\xd4\x73\x75\x09\x55\x08\x4f\x4d\x51\xf0\x4d\x2c\x52\x30\x30\x53\xe0\x02\x04\x00\x00\xff\xff\xf8\x57\xe2\x59\x20\x00\x00\x00")

func test_data5MboxBytes() ([]byte, error) {
	return bindataRead(
		_test_data5Mbox,
		"test_data/5.mbox",
	)
}

func test_data5Mbox() (*asset, error) {
	bytes, err := test_data5MboxBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_data/5.mbox", size: 32, mode: os.FileMode(416), modTime: time.Unix(1453406751, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _test_data5Res = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func test_data5ResBytes() ([]byte, error) {
	return bindataRead(
		_test_data5Res,
		"test_data/5.res",
	)
}

func test_data5Res() (*asset, error) {
	bytes, err := test_data5ResBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "test_data/5.res", size: 0, mode: os.FileMode(420), modTime: time.Unix(1453406751, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"test_data/0.mbox": test_data0Mbox,
	"test_data/0.res": test_data0Res,
	"test_data/1.mbox": test_data1Mbox,
	"test_data/1.res": test_data1Res,
	"test_data/2.mbox": test_data2Mbox,
	"test_data/2.res": test_data2Res,
	"test_data/3.mbox": test_data3Mbox,
	"test_data/3.res": test_data3Res,
	"test_data/4.mbox": test_data4Mbox,
	"test_data/4.res": test_data4Res,
	"test_data/5.mbox": test_data5Mbox,
	"test_data/5.res": test_data5Res,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"test_data": &bintree{nil, map[string]*bintree{
		"0.mbox": &bintree{test_data0Mbox, map[string]*bintree{}},
		"0.res": &bintree{test_data0Res, map[string]*bintree{}},
		"1.mbox": &bintree{test_data1Mbox, map[string]*bintree{}},
		"1.res": &bintree{test_data1Res, map[string]*bintree{}},
		"2.mbox": &bintree{test_data2Mbox, map[string]*bintree{}},
		"2.res": &bintree{test_data2Res, map[string]*bintree{}},
		"3.mbox": &bintree{test_data3Mbox, map[string]*bintree{}},
		"3.res": &bintree{test_data3Res, map[string]*bintree{}},
		"4.mbox": &bintree{test_data4Mbox, map[string]*bintree{}},
		"4.res": &bintree{test_data4Res, map[string]*bintree{}},
		"5.mbox": &bintree{test_data5Mbox, map[string]*bintree{}},
		"5.res": &bintree{test_data5Res, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

